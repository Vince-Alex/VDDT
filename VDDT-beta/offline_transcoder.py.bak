import os
import re
import subprocess
import sys
from tqdm import tqdm
from colorama import Fore, Style

def ask(prompt):
    while True:
        ans = input(prompt + " (y/n): ").strip().lower()
        if ans in {"y", "yes"}:
            return True
        if ans in {"n", "no"}:
            return False
        print("请输入 y 或 n")

def parse_resolution(s: str):
    s = s.strip().lower()
    if "*" in s:
        w, h = s.split("*", 1)
        if w.isdigit() and h.isdigit():
            return f"{w}:{h}"
    if "x" in s:
        w, h = s.split("x", 1)
        if w.isdigit() and h.isdigit():
            return f"{w}:{h}"
    if s.endswith("p") and s[:-1].isdigit():
        return f"-2:{s[:-1]}"
    return None

def get_duration_ms(path):
    try:
        out = subprocess.check_output(
            ["ffprobe", "-v", "error", "-show_entries", "format=duration", "-of", "csv=p=0", path],
            text=True
        ).strip()
        return int(float(out) * 1000)
    except Exception:
        return None

def transcode_with_ffmpeg(input_path, output_path, codec_args):
    total_ms = get_duration_ms(input_path)
    if total_ms is None:
        print(Fore.RED + "[错误] 无法获取视频时长" + Style.RESET_ALL)
        return

    cmd = ["stdbuf", "-oL", "ffmpeg", "-i", input_path,
           "-progress", "pipe:1", "-nostats", "-loglevel", "error"] + codec_args + [output_path, "-y"]

    print(Fore.CYAN + f"[转码中] {os.path.basename(input_path)} -> {os.path.basename(output_path)}" + Style.RESET_ALL)

    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True, bufsize=1)

    with tqdm(total=100, desc="Progress", unit="%", ncols=80) as bar:
        for line in iter(proc.stdout.readline, ''):
            line = line.strip()
            if line.startswith("out_time_ms="):
                match = re.search(r"out_time_ms=(\d+)", line)
                if match:
                    current_ms = int(match.group(1))
                    percent = min(int(current_ms / total_ms * 100), 100)
                    bar.n = percent
                    bar.refresh()
    proc.wait()
    if proc.returncode == 0:
        print(Fore.GREEN + "[完成] 转码成功 ✓" + Style.RESET_ALL)
    else:
        print(Fore.RED + "[失败] 转码失败 ✗" + Style.RESET_ALL)
def run_offline_transcoder():
    print("=== 离线转码工具（tqdm 进度条）===\n")
    path = input("请输入文件夹路径：").strip()
    if not os.path.isdir(path):
        print(Fore.RED + "文件夹路径无效！" + Style.RESET_ALL)
        return

    # ---------- 扫描视频 ----------
    video_exts = ['.mp4', '.mkv', '.avi', '.mov', '.flv', '.wmv', '.m4v', '.ts', '.webm']
    files = sorted([
        os.path.join(path, f) for f in os.listdir(path)
        if os.path.splitext(f)[1].lower() in video_exts
    ])

    if not files:
        print(Fore.YELLOW + "未找到可转码的视频文件。" + Style.RESET_ALL)
        return

    print("\n找到以下视频文件：")
    for i, fp in enumerate(files, 1):
        print(f"{i}. {os.path.basename(fp)}")

    # ---------- 选择文件 ----------
    while True:
        raw = input("请输入编号（多个用空格，0 为全部）：").strip()
        if raw == "0":
            selected = files
            break
        try:
            idxs = [int(x) - 1 for x in raw.split()]
            selected = [files[i] for i in idxs if 0 <= i < len(files)]
            if selected:
                break
        except ValueError:
            pass
        print("输入有误，请重试。")

    # ---------- 选择格式 ----------
    formats = {"1": "mp4", "2": "mkv", "3": "avi", "4": "mov", "5": "flv", "6": "自定义"}
    print("\n可选目标格式：")
    for k, v in formats.items():
        print(f"{k}. {v}")
    while True:
        choice = input("请选择编号或输入扩展名：").strip()
        if choice in formats:
            ext = formats[choice] if choice != "6" else input("扩展名：").strip().lstrip('.')
            break
        elif choice and not choice.isdigit():
            ext = choice.lstrip('.')
            break
        else:
            print("无效输入。")
    if not ext:
        print("扩展名不能为空")
        return

    # ---------- 分辨率 ----------
    res = input("分辨率（如 1280*720、720p，留空原分辨率）：").strip()
    codec_args = (["-vf", f"scale={parse_resolution(res)}", "-c:v", "libx264", "-preset", "medium", "-c:a", "aac"]
                  if res and parse_resolution(res) else ["-c", "copy"])

    # ---------- 开始转码 ----------
    for fp in selected:
        out = f"{os.path.splitext(fp)[0]}_converted.{ext}"
        transcode_with_ffmpeg(fp, out, codec_args)
